plugins {
    id 'base'
    id 'java'
    id "maven-publish"
    id 'net.neoforged.moddev' version '1.0.21'
}

base {
    archivesName = project.archives_base_name
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    mavenLocal()
    //maven {
		// Shedaniel's maven (Architectury API)
		//    url = "https://maven.architectury.dev"
		//    content {
		//	      includeGroup "dev.architectury"
		//    }
	  //}

	  maven {
		// saps.dev Maven (KubeJS and Rhino)
		    url = "https://maven.latvian.dev/releases"
		    content {
			      includeGroup "dev.latvian.mods"
			      includeGroup "dev.latvian.apps"
		    }
	  }
    
    maven {
        url 'https://maven.blakesmods.com'
    }
    maven {
      // location of the maven that hosts JEI files since January 2023
      name = "Jared's maven"
      url = "https://maven.blamejared.com/"
    }
    maven { url 'https://maven.neoforged.net/releases/' }
    
	  maven {
		    url 'https://jitpack.io'
		    content {
			  includeGroup "com.github.rtyley"
		    }
	  }
}

java {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_21
}

neoForge {
    version = project.neoforge_version

    parchment {
        mappingsVersion = project.parchment_mapping_version
        minecraftVersion = project.parchment_mc_version
    }

    runs {
        client {
            client()
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }
    mods {
		    kubejs {
			      sourceSet sourceSets.main
		    }
	  }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    // in this example, we'll be adding JEI as a dependency
    // according to their developer example on GitHub
    // see: https://github.com/mezz/JustEnoughItems/wiki/Getting-Started
    // compile against the JEI API but do not include it at runtime
    // don't worry about loom "not finding a forge mod" here,
    // JEI's api just doesn't have any class with an @Mod annotation
    // modCompileOnly "mezz.jei:jei-1.20.1:${jei_version}:api"
    // at runtime, use the full JEI jar
    // modRuntimeOnly "mezz.jei:jei-1.20.1:${jei_version}"
    implementation("dev.latvian.mods:kubejs-neoforge:${kubejs_version}")
    implementation("dev.latvian.mods:rhino:${rhino_version}")
    implementation("dev.latvian.apps:tiny-java-server:${tiny_server_version}")
    implementation("com.blakebr0.cucumber:Cucumber:${minecraft_version}-${cucumber_version}")
    implementation("com.blakebr0.mysticalagriculture:MysticalAgriculture:${minecraft_version}-${mysticalagriculture_version}")
    // while i don't know how to make a dependencies for only runClient comment this out to test it doesn't dedpend on JEI 
    runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")
}

processResources {
    def depsVer = [
          "mod_id" : project.mod_id
        , "version": project.version
        , "neoforge_version": project.neoforge_version
        , "loader_version": project.loader_version
        , "minecraft_version": project.minecraft_version
        , "kubejs_version": project.kubejs_version
        , "mysticalagriculture_version": project.mysticalagriculture_version
        ]
    	println("[Process Resources] Replacing properties in resources: " + depsVer)
    // define properties that can be used during resource processing
    inputs.properties depsVer

    // this will replace the property "${version}" in your mods.toml
    // with the version you've defined in your gradle.properties
    filesMatching("META-INF/neoforge.mods.toml") {
        expand depsVer 
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    // add some additional metadata to the jar manifest
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
